
ledivilkku.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000abc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000054  00800060  00000abc  00000b50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000018a  008000b4  008000b4  00000ba4  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00000ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000182  00000000  00000000  00000be4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000099b  00000000  00000000  00000d66  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003b0  00000000  00000000  00001701  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008c8  00000000  00000000  00001ab1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f0  00000000  00000000  0000237c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001eb  00000000  00000000  0000246c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000908  00000000  00000000  00002657  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  00002f5f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	3a c0       	rjmp	.+116    	; 0x76 <__ctors_end>
   2:	54 c0       	rjmp	.+168    	; 0xac <__bad_interrupt>
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	52 c0       	rjmp	.+164    	; 0xac <__bad_interrupt>
   8:	07 c4       	rjmp	.+2062   	; 0x818 <__vector_4>
   a:	50 c0       	rjmp	.+160    	; 0xac <__bad_interrupt>
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	4e c0       	rjmp	.+156    	; 0xac <__bad_interrupt>
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	4c c0       	rjmp	.+152    	; 0xac <__bad_interrupt>
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	4a c0       	rjmp	.+148    	; 0xac <__bad_interrupt>
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	48 c0       	rjmp	.+144    	; 0xac <__bad_interrupt>
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	46 c0       	rjmp	.+140    	; 0xac <__bad_interrupt>
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>

00000022 <animation>:
  22:	65 37 30 61 77 66 66 66 66 78 65 30 66 61 65 30     e70awffffxe0fae0
  32:	30 73 30 30 77 30 30 34 30 65 30 66 73 30 31 77     0s00w0040e0fs01w
  42:	30 30 32 30 73 30 30 65 30 30 73 30 31 77 30 30     0020s00e00s01w00
  52:	32 30 65 30 66 73 30 32 77 30 30 34 30 73 30 30     20e0fs02w0040s00
  62:	65 30 30 73 30 32 77 30 30 34 30 65 30 66 73 30     e00s02w0040e0fs0
  72:	33 00 00 00                                         3...

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf e5       	ldi	r28, 0x5F	; 95
  7c:	d2 e0       	ldi	r29, 0x02	; 2
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_copy_data>:
  82:	10 e0       	ldi	r17, 0x00	; 0
  84:	a0 e6       	ldi	r26, 0x60	; 96
  86:	b0 e0       	ldi	r27, 0x00	; 0
  88:	ec eb       	ldi	r30, 0xBC	; 188
  8a:	fa e0       	ldi	r31, 0x0A	; 10
  8c:	02 c0       	rjmp	.+4      	; 0x92 <.do_copy_data_start>

0000008e <.do_copy_data_loop>:
  8e:	05 90       	lpm	r0, Z+
  90:	0d 92       	st	X+, r0

00000092 <.do_copy_data_start>:
  92:	a4 3b       	cpi	r26, 0xB4	; 180
  94:	b1 07       	cpc	r27, r17
  96:	d9 f7       	brne	.-10     	; 0x8e <.do_copy_data_loop>

00000098 <__do_clear_bss>:
  98:	12 e0       	ldi	r17, 0x02	; 2
  9a:	a4 eb       	ldi	r26, 0xB4	; 180
  9c:	b0 e0       	ldi	r27, 0x00	; 0
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	ae 33       	cpi	r26, 0x3E	; 62
  a4:	b1 07       	cpc	r27, r17
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0c d2       	rcall	.+1048   	; 0x4c2 <main>
  aa:	06 c5       	rjmp	.+2572   	; 0xab8 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <setanimation>:
void setanimation(void)
{
uint8_t seqno=0;
uint8_t a_b;
a_ptr=animation;
while (seqno!=animationsequence)
  ae:	40 91 b4 00 	lds	r20, 0x00B4
  b2:	30 e0       	ldi	r19, 0x00	; 0
  b4:	82 e2       	ldi	r24, 0x22	; 34
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	0d c0       	rjmp	.+26     	; 0xd4 <setanimation+0x26>
  ba:	fc 01       	movw	r30, r24
  bc:	01 96       	adiw	r24, 0x01	; 1
   {
   a_b=pgm_read_byte_near(a_ptr++);
  be:	24 91       	lpm	r18, Z+
   if (a_b==0) // end of program - jump to beginning
  c0:	22 23       	and	r18, r18
  c2:	29 f4       	brne	.+10     	; 0xce <setanimation+0x20>
      {
	  animationsequence=0;
  c4:	10 92 b4 00 	sts	0x00B4, r1
	  a_ptr=animation;
  c8:	82 e2       	ldi	r24, 0x22	; 34
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	05 c0       	rjmp	.+10     	; 0xd8 <setanimation+0x2a>
	  break;
	  }
   if (a_b=='x') seqno++;
  ce:	28 37       	cpi	r18, 0x78	; 120
  d0:	a1 f7       	brne	.-24     	; 0xba <setanimation+0xc>
  d2:	3f 5f       	subi	r19, 0xFF	; 255
void setanimation(void)
{
uint8_t seqno=0;
uint8_t a_b;
a_ptr=animation;
while (seqno!=animationsequence)
  d4:	34 17       	cp	r19, r20
  d6:	89 f7       	brne	.-30     	; 0xba <setanimation+0xc>
  d8:	90 93 ba 00 	sts	0x00BA, r25
  dc:	80 93 b9 00 	sts	0x00B9, r24
	  a_ptr=animation;
	  break;
	  }
   if (a_b=='x') seqno++;
   }
a_w=0;
  e0:	10 92 bd 00 	sts	0x00BD, r1
  e4:	10 92 bc 00 	sts	0x00BC, r1
}
  e8:	08 95       	ret

000000ea <animate_hex2dec>:
}



uint8_t animate_hex2dec(uint8_t character)
{
  ea:	98 2f       	mov	r25, r24
if ((character>='0')&&(character<='9')) return(character-'0');
  ec:	80 53       	subi	r24, 0x30	; 48
  ee:	8a 30       	cpi	r24, 0x0A	; 10
  f0:	68 f0       	brcs	.+26     	; 0x10c <animate_hex2dec+0x22>
if ((character>='a')&&(character<='f')) return(character+10-'a');
  f2:	81 53       	subi	r24, 0x31	; 49
  f4:	86 30       	cpi	r24, 0x06	; 6
  f6:	10 f4       	brcc	.+4      	; 0xfc <animate_hex2dec+0x12>
  f8:	86 5f       	subi	r24, 0xF6	; 246
  fa:	08 95       	ret
if ((character>='A')&&(character<='F')) return(character+10-'A');
  fc:	89 2f       	mov	r24, r25
  fe:	81 54       	subi	r24, 0x41	; 65
 100:	86 30       	cpi	r24, 0x06	; 6
 102:	10 f0       	brcs	.+4      	; 0x108 <animate_hex2dec+0x1e>
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	08 95       	ret
 108:	89 2f       	mov	r24, r25
 10a:	87 53       	subi	r24, 0x37	; 55
return(0); // should never happen
}
 10c:	08 95       	ret

0000010e <animate_parsevalue>:
}



uint16_t animate_parsevalue(uint8_t digits)
{
 10e:	cf 92       	push	r12
 110:	df 92       	push	r13
 112:	ef 92       	push	r14
 114:	ff 92       	push	r15
 116:	0f 93       	push	r16
 118:	1f 93       	push	r17
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	c8 2e       	mov	r12, r24
 120:	c0 91 b9 00 	lds	r28, 0x00B9
 124:	d0 91 ba 00 	lds	r29, 0x00BA
 128:	7e 01       	movw	r14, r28
 12a:	d8 2e       	mov	r13, r24
 12c:	20 e0       	ldi	r18, 0x00	; 0
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	10 c0       	rjmp	.+32     	; 0x152 <animate_parsevalue+0x44>
uint16_t result=0,c;
while (digits--)
   {
   c=pgm_read_byte_near(a_ptr++);
 132:	f7 01       	movw	r30, r14
 134:	84 91       	lpm	r24, Z+
   result<<=4;
 136:	89 01       	movw	r16, r18
 138:	94 e0       	ldi	r25, 0x04	; 4
 13a:	00 0f       	add	r16, r16
 13c:	11 1f       	adc	r17, r17
 13e:	9a 95       	dec	r25
 140:	e1 f7       	brne	.-8      	; 0x13a <animate_parsevalue+0x2c>
   result+=animate_hex2dec(c);
 142:	d3 df       	rcall	.-90     	; 0xea <animate_hex2dec>
 144:	98 01       	movw	r18, r16
 146:	28 0f       	add	r18, r24
 148:	31 1d       	adc	r19, r1
 14a:	da 94       	dec	r13
 14c:	08 94       	sec
 14e:	e1 1c       	adc	r14, r1
 150:	f1 1c       	adc	r15, r1


uint16_t animate_parsevalue(uint8_t digits)
{
uint16_t result=0,c;
while (digits--)
 152:	dd 20       	and	r13, r13
 154:	71 f7       	brne	.-36     	; 0x132 <animate_parsevalue+0x24>
 156:	cc 0d       	add	r28, r12
 158:	d1 1d       	adc	r29, r1
 15a:	d0 93 ba 00 	sts	0x00BA, r29
 15e:	c0 93 b9 00 	sts	0x00B9, r28
   c=pgm_read_byte_near(a_ptr++);
   result<<=4;
   result+=animate_hex2dec(c);
   }
return(result);
}
 162:	c9 01       	movw	r24, r18
 164:	df 91       	pop	r29
 166:	cf 91       	pop	r28
 168:	1f 91       	pop	r17
 16a:	0f 91       	pop	r16
 16c:	ff 90       	pop	r15
 16e:	ef 90       	pop	r14
 170:	df 90       	pop	r13
 172:	cf 90       	pop	r12
 174:	08 95       	ret

00000176 <tick>:


void tick(void)
{
uint8_t tmp;
tmp=led_tick;
 176:	90 91 b8 00 	lds	r25, 0x00B8
while (tmp==led_tick);
 17a:	80 91 b8 00 	lds	r24, 0x00B8
 17e:	98 17       	cp	r25, r24
 180:	e1 f3       	breq	.-8      	; 0x17a <tick+0x4>
}
 182:	08 95       	ret

00000184 <powerdown>:



void powerdown(void)
{
cli();
 184:	f8 94       	cli
TIMSK=0x00;  // disable timer 1 compare A interrupt
 186:	19 be       	out	0x39, r1	; 57
DDRA=0x00;
 188:	1a ba       	out	0x1a, r1	; 26
DDRB=0x00;
 18a:	17 ba       	out	0x17, r1	; 23
DDRC=0x00;
 18c:	14 ba       	out	0x14, r1	; 20
DDRD=0x00;
 18e:	11 ba       	out	0x11, r1	; 17
DDRE=0x00;
 190:	16 b8       	out	0x06, r1	; 6
PORTA=0x00;
 192:	1b ba       	out	0x1b, r1	; 27
PORTB=0x00;
 194:	18 ba       	out	0x18, r1	; 24
PORTC=0x00;
 196:	15 ba       	out	0x15, r1	; 21
PORTD=0x04;
 198:	84 e0       	ldi	r24, 0x04	; 4
 19a:	82 bb       	out	0x12, r24	; 18
PORTE=0x00;
 19c:	17 b8       	out	0x07, r1	; 7
MCUCR&=~0x03; // select low level for INT0
 19e:	85 b7       	in	r24, 0x35	; 53
 1a0:	8c 7f       	andi	r24, 0xFC	; 252
 1a2:	85 bf       	out	0x35, r24	; 53
GIFR=0x00;		// clear pending interrupts
 1a4:	1a be       	out	0x3a, r1	; 58
GICR=0x40;		// enable INT0
 1a6:	80 e4       	ldi	r24, 0x40	; 64
 1a8:	8b bf       	out	0x3b, r24	; 59
sei();
 1aa:	78 94       	sei
MCUCR|=0x20; // enable sleep
 1ac:	85 b7       	in	r24, 0x35	; 53
 1ae:	80 62       	ori	r24, 0x20	; 32
 1b0:	85 bf       	out	0x35, r24	; 53
asm volatile("sleep\n");
 1b2:	88 95       	sleep
}
 1b4:	08 95       	ret

000001b6 <matrix>:



void matrix(void)
{
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
while (led_phase==3);
 1ba:	80 91 b6 00 	lds	r24, 0x00B6
 1be:	83 30       	cpi	r24, 0x03	; 3
 1c0:	e1 f3       	breq	.-8      	; 0x1ba <matrix+0x4>
while (led_phase!=3);
 1c2:	80 91 b6 00 	lds	r24, 0x00B6
 1c6:	83 30       	cpi	r24, 0x03	; 3
 1c8:	e1 f7       	brne	.-8      	; 0x1c2 <matrix+0xc>
 1ca:	ed eb       	ldi	r30, 0xBD	; 189
 1cc:	f1 e0       	ldi	r31, 0x01	; 1
uint8_t *ptr=l;
for (uint8_t i=255;i>255-16;i--)
   {
   uint8_t tmp;
   tmp=ptr[i];
 1ce:	80 81       	ld	r24, Z
   if (tmp)
 1d0:	88 23       	and	r24, r24
 1d2:	11 f0       	breq	.+4      	; 0x1d8 <matrix+0x22>
      {
      ptr[i]=tmp-1;
 1d4:	81 50       	subi	r24, 0x01	; 1
 1d6:	80 83       	st	Z, r24
 1d8:	31 97       	sbiw	r30, 0x01	; 1
void matrix(void)
{
while (led_phase==3);
while (led_phase!=3);
uint8_t *ptr=l;
for (uint8_t i=255;i>255-16;i--)
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	ed 3a       	cpi	r30, 0xAD	; 173
 1de:	f8 07       	cpc	r31, r24
 1e0:	b1 f7       	brne	.-20     	; 0x1ce <matrix+0x18>
 1e2:	4f ee       	ldi	r20, 0xEF	; 239
	  }
   }
for (uint8_t i=255-16;i!=255;i--) // careful with sign
   {
   uint8_t tmp;
   tmp=ptr[i];
 1e4:	24 2f       	mov	r18, r20
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	d9 01       	movw	r26, r18
 1ea:	a2 54       	subi	r26, 0x42	; 66
 1ec:	bf 4f       	sbci	r27, 0xFF	; 255
 1ee:	9c 91       	ld	r25, X
   if (tmp)
 1f0:	99 23       	and	r25, r25
 1f2:	49 f0       	breq	.+18     	; 0x206 <matrix+0x50>
      {
	  if (ptr[i+16]<tmp)
 1f4:	f9 01       	movw	r30, r18
 1f6:	e2 53       	subi	r30, 0x32	; 50
 1f8:	ff 4f       	sbci	r31, 0xFF	; 255
 1fa:	80 81       	ld	r24, Z
 1fc:	89 17       	cp	r24, r25
 1fe:	08 f4       	brcc	.+2      	; 0x202 <matrix+0x4c>
	     {
		 ptr[i+16]=tmp;
 200:	90 83       	st	Z, r25
		 }
      ptr[i]=tmp-1;
 202:	91 50       	subi	r25, 0x01	; 1
 204:	9c 93       	st	X, r25
   if (tmp)
      {
      ptr[i]=tmp-1;
	  }
   }
for (uint8_t i=255-16;i!=255;i--) // careful with sign
 206:	41 50       	subi	r20, 0x01	; 1
 208:	68 f7       	brcc	.-38     	; 0x1e4 <matrix+0x2e>
 20a:	ce eb       	ldi	r28, 0xBE	; 190
 20c:	d0 e0       	ldi	r29, 0x00	; 0
		 ptr[i+16]=tmp;
		 }
      ptr[i]=tmp-1;
	  }
   }
for (uint8_t i=0;i<16;i++) if ((rand()&0x1f)==0x1f)
 20e:	b2 d3       	rcall	.+1892   	; 0x974 <rand>
 210:	8f 71       	andi	r24, 0x1F	; 31
 212:	90 70       	andi	r25, 0x00	; 0
 214:	4f 97       	sbiw	r24, 0x1f	; 31
 216:	59 f4       	brne	.+22     	; 0x22e <matrix+0x78>
   {
   rand();rand();rand();rand();rand();rand();rand();rand();
 218:	ad d3       	rcall	.+1882   	; 0x974 <rand>
 21a:	ac d3       	rcall	.+1880   	; 0x974 <rand>
 21c:	ab d3       	rcall	.+1878   	; 0x974 <rand>
 21e:	aa d3       	rcall	.+1876   	; 0x974 <rand>
 220:	a9 d3       	rcall	.+1874   	; 0x974 <rand>
 222:	a8 d3       	rcall	.+1872   	; 0x974 <rand>
 224:	a7 d3       	rcall	.+1870   	; 0x974 <rand>
 226:	a6 d3       	rcall	.+1868   	; 0x974 <rand>
   l[i]=rand()&0x0f;
 228:	a5 d3       	rcall	.+1866   	; 0x974 <rand>
 22a:	8f 70       	andi	r24, 0x0F	; 15
 22c:	88 83       	st	Y, r24
 22e:	21 96       	adiw	r28, 0x01	; 1
		 ptr[i+16]=tmp;
		 }
      ptr[i]=tmp-1;
	  }
   }
for (uint8_t i=0;i<16;i++) if ((rand()&0x1f)==0x1f)
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	ce 3c       	cpi	r28, 0xCE	; 206
 234:	d8 07       	cpc	r29, r24
 236:	59 f7       	brne	.-42     	; 0x20e <matrix+0x58>
 238:	90 e0       	ldi	r25, 0x00	; 0


void tick(void)
{
uint8_t tmp;
tmp=led_tick;
 23a:	20 91 b8 00 	lds	r18, 0x00B8
while (tmp==led_tick);
 23e:	80 91 b8 00 	lds	r24, 0x00B8
 242:	28 17       	cp	r18, r24
 244:	e1 f3       	breq	.-8      	; 0x23e <matrix+0x88>
for (uint8_t i=0;i<16;i++) if ((rand()&0x1f)==0x1f)
   {
   rand();rand();rand();rand();rand();rand();rand();rand();
   l[i]=rand()&0x0f;
   }
for (uint8_t i=0;i<7;i++) tick();
 246:	9f 5f       	subi	r25, 0xFF	; 255
 248:	97 30       	cpi	r25, 0x07	; 7
 24a:	b9 f7       	brne	.-18     	; 0x23a <matrix+0x84>
l2led();
 24c:	61 d2       	rcall	.+1218   	; 0x710 <l2led>
}
 24e:	df 91       	pop	r29
 250:	cf 91       	pop	r28
 252:	08 95       	ret

00000254 <animate>:
}


 
void animate(void)
{
 254:	8f 92       	push	r8
 256:	9f 92       	push	r9
 258:	af 92       	push	r10
 25a:	bf 92       	push	r11
 25c:	cf 92       	push	r12
 25e:	df 92       	push	r13
 260:	ef 92       	push	r14
 262:	ff 92       	push	r15
 264:	0f 93       	push	r16
 266:	1f 93       	push	r17
 268:	cf 93       	push	r28
 26a:	df 93       	push	r29
 26c:	5f ef       	ldi	r21, 0xFF	; 255
 26e:	85 2e       	mov	r8, r21
 270:	91 2c       	mov	r9, r1
			   {
			   l[offset+j]=l[offset+j+amount];
			   }
			}
		 amount = (a_s&0x0f)<<4;
		 if (a_s&0x20) for (int16_t i=0;i<256-amount;i++) l[i]=l[i+amount];// shift up
 272:	a1 2c       	mov	r10, r1
 274:	41 e0       	ldi	r20, 0x01	; 1
 276:	b4 2e       	mov	r11, r20
	     a_s=animate_parsevalue(2);
		 uint8_t amount = a_s&0x0f;
		 if (a_s&0x10) for (uint8_t i=0;i<16;i++) // shift left
		    {
			uint8_t offset = i<<4;
			for (uint8_t j=0;j<16-amount;j++)
 278:	30 e1       	ldi	r19, 0x10	; 16
 27a:	c3 2e       	mov	r12, r19
 27c:	d1 2c       	mov	r13, r1
 27e:	bb c0       	rjmp	.+374    	; 0x3f6 <__stack+0x197>
{
uint8_t a_b;
uint8_t a_s;
while (a_w==0) // loop until we reach wait statement - or are already waiting
   {
   a_b=pgm_read_byte_near(a_ptr++);
 280:	e0 91 b9 00 	lds	r30, 0x00B9
 284:	f0 91 ba 00 	lds	r31, 0x00BA
 288:	31 96       	adiw	r30, 0x01	; 1
 28a:	f0 93 ba 00 	sts	0x00BA, r31
 28e:	e0 93 b9 00 	sts	0x00B9, r30
 292:	31 97       	sbiw	r30, 0x01	; 1
 294:	84 91       	lpm	r24, Z+
   if ((a_b=='x') || (a_b==0)) // end reached - reset and wait for one cycle (to defend against empty lists)
 296:	88 37       	cpi	r24, 0x78	; 120
 298:	11 f0       	breq	.+4      	; 0x29e <__stack+0x3f>
 29a:	88 23       	and	r24, r24
 29c:	11 f4       	brne	.+4      	; 0x2a2 <__stack+0x43>
	  {
      setanimation();
 29e:	07 df       	rcall	.-498    	; 0xae <setanimation>
 2a0:	f6 c0       	rjmp	.+492    	; 0x48e <__stack+0x22f>
	  //a_ptr=animation;
	  return;
	  }
   switch(a_b)
 2a2:	80 37       	cpi	r24, 0x70	; 112
 2a4:	31 f1       	breq	.+76     	; 0x2f2 <__stack+0x93>
 2a6:	81 37       	cpi	r24, 0x71	; 113
 2a8:	30 f4       	brcc	.+12     	; 0x2b6 <__stack+0x57>
 2aa:	81 36       	cpi	r24, 0x61	; 97
 2ac:	c1 f0       	breq	.+48     	; 0x2de <__stack+0x7f>
 2ae:	85 36       	cpi	r24, 0x65	; 101
 2b0:	09 f0       	breq	.+2      	; 0x2b4 <__stack+0x55>
 2b2:	a0 c0       	rjmp	.+320    	; 0x3f4 <__stack+0x195>
 2b4:	06 c0       	rjmp	.+12     	; 0x2c2 <__stack+0x63>
 2b6:	83 37       	cpi	r24, 0x73	; 115
 2b8:	49 f0       	breq	.+18     	; 0x2cc <__stack+0x6d>
 2ba:	87 37       	cpi	r24, 0x77	; 119
 2bc:	09 f0       	breq	.+2      	; 0x2c0 <__stack+0x61>
 2be:	9a c0       	rjmp	.+308    	; 0x3f4 <__stack+0x195>
 2c0:	92 c0       	rjmp	.+292    	; 0x3e6 <__stack+0x187>
      {
	  case 'e':
	     a_e=animate_parsevalue(2);
 2c2:	82 e0       	ldi	r24, 0x02	; 2
 2c4:	24 df       	rcall	.-440    	; 0x10e <animate_parsevalue>
 2c6:	80 93 bb 00 	sts	0x00BB, r24
 2ca:	95 c0       	rjmp	.+298    	; 0x3f6 <__stack+0x197>
	     break;
	  case 's':
	     l[animate_parsevalue(2)]=a_e;
 2cc:	82 e0       	ldi	r24, 0x02	; 2
 2ce:	1f df       	rcall	.-450    	; 0x10e <animate_parsevalue>
 2d0:	fc 01       	movw	r30, r24
 2d2:	e2 54       	subi	r30, 0x42	; 66
 2d4:	ff 4f       	sbci	r31, 0xFF	; 255
 2d6:	80 91 bb 00 	lds	r24, 0x00BB
 2da:	80 83       	st	Z, r24
 2dc:	8c c0       	rjmp	.+280    	; 0x3f6 <__stack+0x197>
	     break;
	  case 'a':
	     for (uint16_t i=0;i<256;i++) l[i]=a_e;
 2de:	80 91 bb 00 	lds	r24, 0x00BB
 2e2:	ee eb       	ldi	r30, 0xBE	; 190
 2e4:	f0 e0       	ldi	r31, 0x00	; 0
 2e6:	81 93       	st	Z+, r24
 2e8:	21 e0       	ldi	r18, 0x01	; 1
 2ea:	ee 3b       	cpi	r30, 0xBE	; 190
 2ec:	f2 07       	cpc	r31, r18
 2ee:	d9 f7       	brne	.-10     	; 0x2e6 <__stack+0x87>
 2f0:	82 c0       	rjmp	.+260    	; 0x3f6 <__stack+0x197>
	     break;
	  case 'p':
	     a_s=animate_parsevalue(2);
 2f2:	82 e0       	ldi	r24, 0x02	; 2
 2f4:	0c df       	rcall	.-488    	; 0x10e <animate_parsevalue>
 2f6:	e8 2e       	mov	r14, r24
		 uint8_t amount = a_s&0x0f;
 2f8:	2f e0       	ldi	r18, 0x0F	; 15
 2fa:	f2 2e       	mov	r15, r18
 2fc:	f8 22       	and	r15, r24
		 if (a_s&0x10) for (uint8_t i=0;i<16;i++) // shift left
 2fe:	68 2f       	mov	r22, r24
 300:	84 ff       	sbrs	r24, 4
 302:	22 c0       	rjmp	.+68     	; 0x348 <__stack+0xe9>
 304:	30 e0       	ldi	r19, 0x00	; 0
		    {
			uint8_t offset = i<<4;
			for (uint8_t j=0;j<16-amount;j++)
 306:	8f 2d       	mov	r24, r15
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	86 01       	movw	r16, r12
 30c:	08 1b       	sub	r16, r24
 30e:	19 0b       	sbc	r17, r25
			   {
			   l[offset+j]=l[offset+j+amount];
 310:	ec 01       	movw	r28, r24
 312:	c2 54       	subi	r28, 0x42	; 66
 314:	df 4f       	sbci	r29, 0xFF	; 255
	  case 'p':
	     a_s=animate_parsevalue(2);
		 uint8_t amount = a_s&0x0f;
		 if (a_s&0x10) for (uint8_t i=0;i<16;i++) // shift left
		    {
			uint8_t offset = i<<4;
 316:	83 2f       	mov	r24, r19
 318:	82 95       	swap	r24
 31a:	80 7f       	andi	r24, 0xF0	; 240
 31c:	20 e0       	ldi	r18, 0x00	; 0
			for (uint8_t j=0;j<16-amount;j++)
			   {
			   l[offset+j]=l[offset+j+amount];
 31e:	48 2f       	mov	r20, r24
 320:	50 e0       	ldi	r21, 0x00	; 0
 322:	0a c0       	rjmp	.+20     	; 0x338 <__stack+0xd9>
 324:	e4 0f       	add	r30, r20
 326:	f5 1f       	adc	r31, r21
 328:	de 01       	movw	r26, r28
 32a:	ae 0f       	add	r26, r30
 32c:	bf 1f       	adc	r27, r31
 32e:	8c 91       	ld	r24, X
 330:	e2 54       	subi	r30, 0x42	; 66
 332:	ff 4f       	sbci	r31, 0xFF	; 255
 334:	80 83       	st	Z, r24
	     a_s=animate_parsevalue(2);
		 uint8_t amount = a_s&0x0f;
		 if (a_s&0x10) for (uint8_t i=0;i<16;i++) // shift left
		    {
			uint8_t offset = i<<4;
			for (uint8_t j=0;j<16-amount;j++)
 336:	2f 5f       	subi	r18, 0xFF	; 255
 338:	e2 2f       	mov	r30, r18
 33a:	f0 e0       	ldi	r31, 0x00	; 0
 33c:	e0 17       	cp	r30, r16
 33e:	f1 07       	cpc	r31, r17
 340:	8c f3       	brlt	.-30     	; 0x324 <__stack+0xc5>
	     for (uint16_t i=0;i<256;i++) l[i]=a_e;
	     break;
	  case 'p':
	     a_s=animate_parsevalue(2);
		 uint8_t amount = a_s&0x0f;
		 if (a_s&0x10) for (uint8_t i=0;i<16;i++) // shift left
 342:	3f 5f       	subi	r19, 0xFF	; 255
 344:	30 31       	cpi	r19, 0x10	; 16
 346:	39 f7       	brne	.-50     	; 0x316 <__stack+0xb7>
			for (uint8_t j=0;j<16-amount;j++)
			   {
			   l[offset+j]=l[offset+j+amount];
			   }
			}
		 amount = (a_s&0x0f)<<4;
 348:	16 2f       	mov	r17, r22
 34a:	12 95       	swap	r17
 34c:	10 7f       	andi	r17, 0xF0	; 240
		 if (a_s&0x20) for (int16_t i=0;i<256-amount;i++) l[i]=l[i+amount];// shift up
 34e:	65 ff       	sbrs	r22, 5
 350:	15 c0       	rjmp	.+42     	; 0x37c <__stack+0x11d>
}


 
void animate(void)
{
 352:	81 2f       	mov	r24, r17
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	dc 01       	movw	r26, r24
 358:	a2 54       	subi	r26, 0x42	; 66
 35a:	bf 4f       	sbci	r27, 0xFF	; 255
 35c:	20 e0       	ldi	r18, 0x00	; 0
 35e:	30 e0       	ldi	r19, 0x00	; 0
			   {
			   l[offset+j]=l[offset+j+amount];
			   }
			}
		 amount = (a_s&0x0f)<<4;
		 if (a_s&0x20) for (int16_t i=0;i<256-amount;i++) l[i]=l[i+amount];// shift up
 360:	a5 01       	movw	r20, r10
 362:	48 1b       	sub	r20, r24
 364:	59 0b       	sbc	r21, r25
 366:	07 c0       	rjmp	.+14     	; 0x376 <__stack+0x117>
 368:	f9 01       	movw	r30, r18
 36a:	e2 54       	subi	r30, 0x42	; 66
 36c:	ff 4f       	sbci	r31, 0xFF	; 255
 36e:	8d 91       	ld	r24, X+
 370:	80 83       	st	Z, r24
 372:	2f 5f       	subi	r18, 0xFF	; 255
 374:	3f 4f       	sbci	r19, 0xFF	; 255
 376:	24 17       	cp	r18, r20
 378:	35 07       	cpc	r19, r21
 37a:	b4 f3       	brlt	.-20     	; 0x368 <__stack+0x109>
		 amount = a_s&0x0f;
		 if (a_s&0x40) for (uint8_t i=0;i<16;i++) // shift right
 37c:	66 ff       	sbrs	r22, 6
 37e:	1b c0       	rjmp	.+54     	; 0x3b6 <__stack+0x157>
 380:	20 e0       	ldi	r18, 0x00	; 0
		    {
			uint8_t offset = i<<4;
			for (uint8_t j=15;j>=amount;j--)
			   {
			   l[offset+j]=l[offset+j-amount];
 382:	6f 2d       	mov	r22, r15
 384:	70 e0       	ldi	r23, 0x00	; 0
		 amount = (a_s&0x0f)<<4;
		 if (a_s&0x20) for (int16_t i=0;i<256-amount;i++) l[i]=l[i+amount];// shift up
		 amount = a_s&0x0f;
		 if (a_s&0x40) for (uint8_t i=0;i<16;i++) // shift right
		    {
			uint8_t offset = i<<4;
 386:	82 2f       	mov	r24, r18
 388:	82 95       	swap	r24
 38a:	80 7f       	andi	r24, 0xF0	; 240
 38c:	9f e0       	ldi	r25, 0x0F	; 15
			for (uint8_t j=15;j>=amount;j--)
			   {
			   l[offset+j]=l[offset+j-amount];
 38e:	48 2f       	mov	r20, r24
 390:	50 e0       	ldi	r21, 0x00	; 0
 392:	fa 01       	movw	r30, r20
 394:	e9 0f       	add	r30, r25
 396:	f1 1d       	adc	r31, r1
 398:	df 01       	movw	r26, r30
 39a:	a6 1b       	sub	r26, r22
 39c:	b7 0b       	sbc	r27, r23
 39e:	a2 54       	subi	r26, 0x42	; 66
 3a0:	bf 4f       	sbci	r27, 0xFF	; 255
 3a2:	8c 91       	ld	r24, X
 3a4:	e2 54       	subi	r30, 0x42	; 66
 3a6:	ff 4f       	sbci	r31, 0xFF	; 255
 3a8:	80 83       	st	Z, r24
		 if (a_s&0x20) for (int16_t i=0;i<256-amount;i++) l[i]=l[i+amount];// shift up
		 amount = a_s&0x0f;
		 if (a_s&0x40) for (uint8_t i=0;i<16;i++) // shift right
		    {
			uint8_t offset = i<<4;
			for (uint8_t j=15;j>=amount;j--)
 3aa:	91 50       	subi	r25, 0x01	; 1
 3ac:	9f 15       	cp	r25, r15
 3ae:	88 f7       	brcc	.-30     	; 0x392 <__stack+0x133>
			   }
			}
		 amount = (a_s&0x0f)<<4;
		 if (a_s&0x20) for (int16_t i=0;i<256-amount;i++) l[i]=l[i+amount];// shift up
		 amount = a_s&0x0f;
		 if (a_s&0x40) for (uint8_t i=0;i<16;i++) // shift right
 3b0:	2f 5f       	subi	r18, 0xFF	; 255
 3b2:	20 31       	cpi	r18, 0x10	; 16
 3b4:	41 f7       	brne	.-48     	; 0x386 <__stack+0x127>
			   {
			   l[offset+j]=l[offset+j-amount];
			   }
			}
		 amount = (a_s&0x0f)<<4;
		 if (a_s&0x80) for (int16_t i=255;i>=amount;i--) l[i]=l[i-amount];// shift down
 3b6:	e7 fe       	sbrs	r14, 7
 3b8:	1e c0       	rjmp	.+60     	; 0x3f6 <__stack+0x197>
}


 
void animate(void)
{
 3ba:	41 2f       	mov	r20, r17
 3bc:	50 e0       	ldi	r21, 0x00	; 0
 3be:	d4 01       	movw	r26, r8
 3c0:	a4 1b       	sub	r26, r20
 3c2:	b5 0b       	sbc	r27, r21
 3c4:	a2 54       	subi	r26, 0x42	; 66
 3c6:	bf 4f       	sbci	r27, 0xFF	; 255
 3c8:	2f ef       	ldi	r18, 0xFF	; 255
 3ca:	30 e0       	ldi	r19, 0x00	; 0
 3cc:	08 c0       	rjmp	.+16     	; 0x3de <__stack+0x17f>
			   {
			   l[offset+j]=l[offset+j-amount];
			   }
			}
		 amount = (a_s&0x0f)<<4;
		 if (a_s&0x80) for (int16_t i=255;i>=amount;i--) l[i]=l[i-amount];// shift down
 3ce:	f9 01       	movw	r30, r18
 3d0:	e2 54       	subi	r30, 0x42	; 66
 3d2:	ff 4f       	sbci	r31, 0xFF	; 255
 3d4:	8c 91       	ld	r24, X
 3d6:	80 83       	st	Z, r24
 3d8:	21 50       	subi	r18, 0x01	; 1
 3da:	30 40       	sbci	r19, 0x00	; 0
 3dc:	11 97       	sbiw	r26, 0x01	; 1
 3de:	24 17       	cp	r18, r20
 3e0:	35 07       	cpc	r19, r21
 3e2:	ac f7       	brge	.-22     	; 0x3ce <__stack+0x16f>
 3e4:	08 c0       	rjmp	.+16     	; 0x3f6 <__stack+0x197>
	     break;
	  case 'w':
	     a_w=animate_parsevalue(4);
 3e6:	84 e0       	ldi	r24, 0x04	; 4
 3e8:	92 de       	rcall	.-732    	; 0x10e <animate_parsevalue>
 3ea:	90 93 bd 00 	sts	0x00BD, r25
 3ee:	80 93 bc 00 	sts	0x00BC, r24
 3f2:	01 c0       	rjmp	.+2      	; 0x3f6 <__stack+0x197>
	     break;
      default:	// should never happen - reset animation to the start of current sequence
	     setanimation();
 3f4:	5c de       	rcall	.-840    	; 0xae <setanimation>
 
void animate(void)
{
uint8_t a_b;
uint8_t a_s;
while (a_w==0) // loop until we reach wait statement - or are already waiting
 3f6:	80 91 bc 00 	lds	r24, 0x00BC
 3fa:	90 91 bd 00 	lds	r25, 0x00BD
 3fe:	00 97       	sbiw	r24, 0x00	; 0
 400:	09 f4       	brne	.+2      	; 0x404 <__stack+0x1a5>
 402:	3e cf       	rjmp	.-388    	; 0x280 <__stack+0x21>
	     setanimation();
	     //a_ptr=animation;
	     break;
	  }
   }
if (a_w!=0xffff) a_w--; // 0xffff equals STOP
 404:	2f ef       	ldi	r18, 0xFF	; 255
 406:	8f 3f       	cpi	r24, 0xFF	; 255
 408:	92 07       	cpc	r25, r18
 40a:	29 f0       	breq	.+10     	; 0x416 <__stack+0x1b7>
 40c:	01 97       	sbiw	r24, 0x01	; 1
 40e:	90 93 bd 00 	sts	0x00BD, r25
 412:	80 93 bc 00 	sts	0x00BC, r24
if (led_tick&0x03) return; // run autoanimation only every 4th tick
 416:	80 91 b8 00 	lds	r24, 0x00B8
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	83 70       	andi	r24, 0x03	; 3
 41e:	90 70       	andi	r25, 0x00	; 0
 420:	89 2b       	or	r24, r25
 422:	a9 f5       	brne	.+106    	; 0x48e <__stack+0x22f>
 424:	40 e0       	ldi	r20, 0x00	; 0
 426:	50 e0       	ldi	r21, 0x00	; 0
		 if (a_d&0xf0)
		    {
			a_d=0x00;
			if (a_c&0x40)
			   {
			   a_c^=0x20;
 428:	60 e2       	ldi	r22, 0x20	; 32
   }
if (a_w!=0xffff) a_w--; // 0xffff equals STOP
if (led_tick&0x03) return; // run autoanimation only every 4th tick
uint8_t i=0;
do {
   uint8_t a_tmp=l[i];
 42a:	a4 2f       	mov	r26, r20
 42c:	b0 e0       	ldi	r27, 0x00	; 0
 42e:	fd 01       	movw	r30, r26
 430:	e2 54       	subi	r30, 0x42	; 66
 432:	ff 4f       	sbci	r31, 0xFF	; 255
 434:	e0 81       	ld	r30, Z
   if (a_tmp&0x10) // automatic animation command for this led
 436:	e4 ff       	sbrs	r30, 4
 438:	23 c0       	rjmp	.+70     	; 0x480 <__stack+0x221>
      {
	  uint8_t a_c,a_d;
	  a_d=a_tmp&0x0f;
 43a:	8e 2f       	mov	r24, r30
 43c:	8f 70       	andi	r24, 0x0F	; 15
	  a_c=a_tmp&0xf0;
 43e:	2e 2f       	mov	r18, r30
 440:	20 7f       	andi	r18, 0xF0	; 240
      if (a_c&0x20)
 442:	25 ff       	sbrs	r18, 5
 444:	0d c0       	rjmp	.+26     	; 0x460 <__stack+0x201>
	     {
		 a_d++;
 446:	98 2f       	mov	r25, r24
 448:	9f 5f       	subi	r25, 0xFF	; 255
		 if (a_d&0xf0)
 44a:	89 2f       	mov	r24, r25
 44c:	80 7f       	andi	r24, 0xF0	; 240
 44e:	a1 f0       	breq	.+40     	; 0x478 <__stack+0x219>
		    {
			a_d=0x0f;
			if (a_c&0x40)
 450:	26 ff       	sbrs	r18, 6
 452:	02 c0       	rjmp	.+4      	; 0x458 <__stack+0x1f9>
			   {
			   a_c^=0x20;
 454:	26 27       	eor	r18, r22
 456:	02 c0       	rjmp	.+4      	; 0x45c <__stack+0x1fd>
			   }
            else
			   {
			   a_c&=~0x10;
 458:	2e 2f       	mov	r18, r30
 45a:	20 7e       	andi	r18, 0xE0	; 224
 45c:	9f e0       	ldi	r25, 0x0F	; 15
 45e:	0c c0       	rjmp	.+24     	; 0x478 <__stack+0x219>
			   }
			}
		 }
      else
	     {
		 a_d--;
 460:	98 2f       	mov	r25, r24
 462:	91 50       	subi	r25, 0x01	; 1
		 if (a_d&0xf0)
 464:	89 2f       	mov	r24, r25
 466:	80 7f       	andi	r24, 0xF0	; 240
 468:	39 f0       	breq	.+14     	; 0x478 <__stack+0x219>
		    {
			a_d=0x00;
			if (a_c&0x40)
 46a:	26 ff       	sbrs	r18, 6
 46c:	02 c0       	rjmp	.+4      	; 0x472 <__stack+0x213>
			   {
			   a_c^=0x20;
 46e:	26 27       	eor	r18, r22
 470:	02 c0       	rjmp	.+4      	; 0x476 <__stack+0x217>
			   }
            else
			   {
			   a_c&=~0x10;
 472:	2e 2f       	mov	r18, r30
 474:	20 7e       	andi	r18, 0xE0	; 224
 476:	90 e0       	ldi	r25, 0x00	; 0
			   }
            }
		 }
      l[i]=a_c|a_d;
 478:	a2 54       	subi	r26, 0x42	; 66
 47a:	bf 4f       	sbci	r27, 0xFF	; 255
 47c:	92 2b       	or	r25, r18
 47e:	9c 93       	st	X, r25
 480:	4f 5f       	subi	r20, 0xFF	; 255
 482:	5f 4f       	sbci	r21, 0xFF	; 255
	  }
   i++;
   }
while (i!=0); // loop all 256 values
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	40 30       	cpi	r20, 0x00	; 0
 488:	58 07       	cpc	r21, r24
 48a:	79 f6       	brne	.-98     	; 0x42a <__stack+0x1cb>
l2led();
 48c:	41 d1       	rcall	.+642    	; 0x710 <l2led>
}
 48e:	df 91       	pop	r29
 490:	cf 91       	pop	r28
 492:	1f 91       	pop	r17
 494:	0f 91       	pop	r16
 496:	ff 90       	pop	r15
 498:	ef 90       	pop	r14
 49a:	df 90       	pop	r13
 49c:	cf 90       	pop	r12
 49e:	bf 90       	pop	r11
 4a0:	af 90       	pop	r10
 4a2:	9f 90       	pop	r9
 4a4:	8f 90       	pop	r8
 4a6:	08 95       	ret

000004a8 <setup>:



void setup(void)
{
led_init();
 4a8:	57 d0       	rcall	.+174    	; 0x558 <led_init>
a_ptr=&animation[0];
 4aa:	82 e2       	ldi	r24, 0x22	; 34
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	90 93 ba 00 	sts	0x00BA, r25
 4b2:	80 93 b9 00 	sts	0x00B9, r24
a_w=0;
 4b6:	10 92 bd 00 	sts	0x00BD, r1
 4ba:	10 92 bc 00 	sts	0x00BC, r1
sei();
 4be:	78 94       	sei
}
 4c0:	08 95       	ret

000004c2 <main>:


int main(void)
{
uint8_t pushcount;
setup();
 4c2:	f2 df       	rcall	.-28     	; 0x4a8 <setup>
 4c4:	90 e0       	ldi	r25, 0x00	; 0


void tick(void)
{
uint8_t tmp;
tmp=led_tick;
 4c6:	20 91 b8 00 	lds	r18, 0x00B8
while (tmp==led_tick);
 4ca:	80 91 b8 00 	lds	r24, 0x00B8
 4ce:	28 17       	cp	r18, r24
 4d0:	e1 f3       	breq	.-8      	; 0x4ca <main+0x8>

int main(void)
{
uint8_t pushcount;
setup();
for (uint8_t i=0;i<20;i++) tick();
 4d2:	9f 5f       	subi	r25, 0xFF	; 255
 4d4:	94 31       	cpi	r25, 0x14	; 20
 4d6:	b9 f7       	brne	.-18     	; 0x4c6 <main+0x4>
while (led_button);
 4d8:	80 91 b7 00 	lds	r24, 0x00B7
 4dc:	88 23       	and	r24, r24
 4de:	e1 f7       	brne	.-8      	; 0x4d8 <main+0x16>
 4e0:	90 e0       	ldi	r25, 0x00	; 0


void tick(void)
{
uint8_t tmp;
tmp=led_tick;
 4e2:	20 91 b8 00 	lds	r18, 0x00B8
while (tmp==led_tick);
 4e6:	80 91 b8 00 	lds	r24, 0x00B8
 4ea:	28 17       	cp	r18, r24
 4ec:	e1 f3       	breq	.-8      	; 0x4e6 <main+0x24>
{
uint8_t pushcount;
setup();
for (uint8_t i=0;i<20;i++) tick();
while (led_button);
for (uint8_t i=0;i<20;i++) tick();
 4ee:	9f 5f       	subi	r25, 0xFF	; 255
 4f0:	94 31       	cpi	r25, 0x14	; 20
 4f2:	b9 f7       	brne	.-18     	; 0x4e2 <main+0x20>
while(1)
	{
	if (led_button)
 4f4:	80 91 b7 00 	lds	r24, 0x00B7
 4f8:	88 23       	and	r24, r24
 4fa:	31 f1       	breq	.+76     	; 0x548 <main+0x86>
	   {
	   led_init();   // immediately blank display
 4fc:	2d d0       	rcall	.+90     	; 0x558 <led_init>


void tick(void)
{
uint8_t tmp;
tmp=led_tick;
 4fe:	90 91 b8 00 	lds	r25, 0x00B8
while (tmp==led_tick);
 502:	80 91 b8 00 	lds	r24, 0x00B8
 506:	98 17       	cp	r25, r24
 508:	e1 f3       	breq	.-8      	; 0x502 <main+0x40>
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	0a c0       	rjmp	.+20     	; 0x522 <main+0x60>


void tick(void)
{
uint8_t tmp;
tmp=led_tick;
 50e:	20 91 b8 00 	lds	r18, 0x00B8
while (tmp==led_tick);
 512:	80 91 b8 00 	lds	r24, 0x00B8
 516:	28 17       	cp	r18, r24
 518:	e1 f3       	breq	.-8      	; 0x512 <main+0x50>
	   tick();       // debounce push
	   pushcount=0;
	   while (led_button)
	      {
          tick();
		  if (!(++pushcount)) pushcount--;
 51a:	89 2f       	mov	r24, r25
 51c:	8f 5f       	subi	r24, 0xFF	; 255
 51e:	09 f0       	breq	.+2      	; 0x522 <main+0x60>
 520:	98 2f       	mov	r25, r24
	if (led_button)
	   {
	   led_init();   // immediately blank display
	   tick();       // debounce push
	   pushcount=0;
	   while (led_button)
 522:	80 91 b7 00 	lds	r24, 0x00B7
 526:	88 23       	and	r24, r24
 528:	91 f7       	brne	.-28     	; 0x50e <main+0x4c>
	      {
          tick();
		  if (!(++pushcount)) pushcount--;
		  }
       if (pushcount>50) powerdown();
 52a:	93 33       	cpi	r25, 0x33	; 51
 52c:	08 f0       	brcs	.+2      	; 0x530 <main+0x6e>
 52e:	2a de       	rcall	.-940    	; 0x184 <powerdown>


void tick(void)
{
uint8_t tmp;
tmp=led_tick;
 530:	90 91 b8 00 	lds	r25, 0x00B8
while (tmp==led_tick);
 534:	80 91 b8 00 	lds	r24, 0x00B8
 538:	98 17       	cp	r25, r24
 53a:	e1 f3       	breq	.-8      	; 0x534 <main+0x72>
          tick();
		  if (!(++pushcount)) pushcount--;
		  }
       if (pushcount>50) powerdown();
	   tick();    // debounce release
	   animationsequence++;
 53c:	80 91 b4 00 	lds	r24, 0x00B4
 540:	8f 5f       	subi	r24, 0xFF	; 255
 542:	80 93 b4 00 	sts	0x00B4, r24
	   setanimation();
 546:	b3 dd       	rcall	.-1178   	; 0xae <setanimation>
	   }
	if (1) 
	   {
	   animate();
 548:	85 de       	rcall	.-758    	; 0x254 <animate>


void tick(void)
{
uint8_t tmp;
tmp=led_tick;
 54a:	90 91 b8 00 	lds	r25, 0x00B8
while (tmp==led_tick);
 54e:	80 91 b8 00 	lds	r24, 0x00B8
 552:	98 17       	cp	r25, r24
 554:	e1 f3       	breq	.-8      	; 0x54e <main+0x8c>
 556:	ce cf       	rjmp	.-100    	; 0x4f4 <main+0x32>

00000558 <led_init>:


void led_init(void)
{
// clear sleep enable - select powerdown as later sleep mode
MCUCR&=~0x20;
 558:	85 b7       	in	r24, 0x35	; 53
 55a:	8f 7d       	andi	r24, 0xDF	; 223
 55c:	85 bf       	out	0x35, r24	; 53
MCUCR|=0x10;
 55e:	85 b7       	in	r24, 0x35	; 53
 560:	80 61       	ori	r24, 0x10	; 16
 562:	85 bf       	out	0x35, r24	; 53
MCUCSR&=~0x20;
 564:	84 b7       	in	r24, 0x34	; 52
 566:	8f 7d       	andi	r24, 0xDF	; 223
 568:	84 bf       	out	0x34, r24	; 52
EMCUCR&=~0x80;
 56a:	86 b7       	in	r24, 0x36	; 54
 56c:	8f 77       	andi	r24, 0x7F	; 127
 56e:	86 bf       	out	0x36, r24	; 54
GICR=0x00;		// disable INT0
 570:	1b be       	out	0x3b, r1	; 59
 572:	26 ec       	ldi	r18, 0xC6	; 198
 574:	31 e0       	ldi	r19, 0x01	; 1
 576:	80 e0       	ldi	r24, 0x00	; 0
 578:	90 e0       	ldi	r25, 0x00	; 0

for (uint8_t i=0;i<ROWS;i++)
   {
   for (uint8_t j=0;j<4;j++)
      {
   	  l_port[i][j][0]=0xff; // A and B
 57a:	4f ef       	ldi	r20, 0xFF	; 255
 57c:	0d c0       	rjmp	.+26     	; 0x598 <led_init+0x40>
 57e:	40 83       	st	Z, r20
   	  l_port[i][j][1]=0xff; // D
 580:	41 83       	std	Z+1, r20	; 0x01
 582:	32 96       	adiw	r30, 0x02	; 2
EMCUCR&=~0x80;
GICR=0x00;		// disable INT0

for (uint8_t i=0;i<ROWS;i++)
   {
   for (uint8_t j=0;j<4;j++)
 584:	e2 17       	cp	r30, r18
 586:	f3 07       	cpc	r31, r19
 588:	d1 f7       	brne	.-12     	; 0x57e <led_init+0x26>
 58a:	01 96       	adiw	r24, 0x01	; 1
 58c:	9f 01       	movw	r18, r30
 58e:	28 5f       	subi	r18, 0xF8	; 248
 590:	3f 4f       	sbci	r19, 0xFF	; 255
MCUCR|=0x10;
MCUCSR&=~0x20;
EMCUCR&=~0x80;
GICR=0x00;		// disable INT0

for (uint8_t i=0;i<ROWS;i++)
 592:	80 31       	cpi	r24, 0x10	; 16
 594:	91 05       	cpc	r25, r1
 596:	49 f0       	breq	.+18     	; 0x5aa <led_init+0x52>
 598:	fc 01       	movw	r30, r24
 59a:	53 e0       	ldi	r21, 0x03	; 3
 59c:	ee 0f       	add	r30, r30
 59e:	ff 1f       	adc	r31, r31
 5a0:	5a 95       	dec	r21
 5a2:	e1 f7       	brne	.-8      	; 0x59c <led_init+0x44>
 5a4:	e2 54       	subi	r30, 0x42	; 66
 5a6:	fe 4f       	sbci	r31, 0xFE	; 254
 5a8:	ea cf       	rjmp	.-44     	; 0x57e <led_init+0x26>
 5aa:	ee eb       	ldi	r30, 0xBE	; 190
 5ac:	f0 e0       	ldi	r31, 0x00	; 0
      {
   	  l_port[i][j][0]=0xff; // A and B
   	  l_port[i][j][1]=0xff; // D
	  }
   }
for (uint16_t i=0;i<ROWS*ROWS;i++) l[i]=0;
 5ae:	11 92       	st	Z+, r1
 5b0:	81 e0       	ldi	r24, 0x01	; 1
 5b2:	ee 3b       	cpi	r30, 0xBE	; 190
 5b4:	f8 07       	cpc	r31, r24
 5b6:	d9 f7       	brne	.-10     	; 0x5ae <led_init+0x56>

// set data direction for matrix driving pins to output
DDRA=0xff;
 5b8:	9f ef       	ldi	r25, 0xFF	; 255
 5ba:	9a bb       	out	0x1a, r25	; 26
DDRB=0x1f;
 5bc:	2f e1       	ldi	r18, 0x1F	; 31
 5be:	27 bb       	out	0x17, r18	; 23
DDRC=0xff;
 5c0:	94 bb       	out	0x14, r25	; 20
DDRD=0xff;
 5c2:	91 bb       	out	0x11, r25	; 17
DDRE=0x07;
 5c4:	87 e0       	ldi	r24, 0x07	; 7
 5c6:	86 b9       	out	0x06, r24	; 6

// disable all - columns 1, rows 0
PORTA=0x07;
 5c8:	8b bb       	out	0x1b, r24	; 27
PORTB=0x1f;
 5ca:	28 bb       	out	0x18, r18	; 24
PORTC=0x00;
 5cc:	15 ba       	out	0x15, r1	; 21
PORTD=0xff;
 5ce:	92 bb       	out	0x12, r25	; 18
PORTE=0x00;
 5d0:	17 b8       	out	0x07, r1	; 7

// set timer interrupt
TCCR1A=0x00; // CTC mode
 5d2:	1f bc       	out	0x2f, r1	; 47
TCCR1B=0x08; // no clock yet
 5d4:	88 e0       	ldi	r24, 0x08	; 8
 5d6:	8e bd       	out	0x2e, r24	; 46
TCNT1=0;     // clear counter (not really necessary after reset)
 5d8:	1d bc       	out	0x2d, r1	; 45
 5da:	1c bc       	out	0x2c, r1	; 44
OCR1A=256;   // 
 5dc:	80 e0       	ldi	r24, 0x00	; 0
 5de:	91 e0       	ldi	r25, 0x01	; 1
 5e0:	9b bd       	out	0x2b, r25	; 43
 5e2:	8a bd       	out	0x2a, r24	; 42
TIMSK=0x40;  // enable compare A interrupt
 5e4:	80 e4       	ldi	r24, 0x40	; 64
 5e6:	89 bf       	out	0x39, r24	; 57
TIFR=0x40;	 // clear possible pending flag (not really necessary, but nice)
 5e8:	88 bf       	out	0x38, r24	; 56
TCCR1B=0x09; // start - full speed
 5ea:	89 e0       	ldi	r24, 0x09	; 9
 5ec:	8e bd       	out	0x2e, r24	; 46
}
 5ee:	08 95       	ret

000005f0 <led_set>:

void led_set(uint8_t x, uint8_t y, uint8_t value)
{
uint8_t port;
uint8_t bit;
port=X[x].port;
 5f0:	e8 2f       	mov	r30, r24
 5f2:	f0 e0       	ldi	r31, 0x00	; 0
 5f4:	ee 0f       	add	r30, r30
 5f6:	ff 1f       	adc	r31, r31
 5f8:	e0 59       	subi	r30, 0x90	; 144
 5fa:	ff 4f       	sbci	r31, 0xFF	; 255
 5fc:	30 81       	ld	r19, Z
bit=1<<X[x].bit;
 5fe:	81 e0       	ldi	r24, 0x01	; 1
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	01 80       	ldd	r0, Z+1	; 0x01
 604:	02 c0       	rjmp	.+4      	; 0x60a <led_set+0x1a>
 606:	88 0f       	add	r24, r24
 608:	99 1f       	adc	r25, r25
 60a:	0a 94       	dec	r0
 60c:	e2 f7       	brpl	.-8      	; 0x606 <led_set+0x16>
 60e:	28 2f       	mov	r18, r24
 610:	e6 2f       	mov	r30, r22
 612:	f0 e0       	ldi	r31, 0x00	; 0
 614:	83 2f       	mov	r24, r19
 616:	90 e0       	ldi	r25, 0x00	; 0
if (value&0x01)
 618:	40 ff       	sbrs	r20, 0
 61a:	0e c0       	rjmp	.+28     	; 0x638 <led_set+0x48>
   {
   l_port[y][0][port]&=~bit;
 61c:	b3 e0       	ldi	r27, 0x03	; 3
 61e:	ee 0f       	add	r30, r30
 620:	ff 1f       	adc	r31, r31
 622:	ba 95       	dec	r27
 624:	e1 f7       	brne	.-8      	; 0x61e <led_set+0x2e>
 626:	e8 0f       	add	r30, r24
 628:	f9 1f       	adc	r31, r25
 62a:	e2 54       	subi	r30, 0x42	; 66
 62c:	fe 4f       	sbci	r31, 0xFE	; 254
 62e:	82 2f       	mov	r24, r18
 630:	80 95       	com	r24
 632:	90 81       	ld	r25, Z
 634:	89 23       	and	r24, r25
 636:	0b c0       	rjmp	.+22     	; 0x64e <led_set+0x5e>
   }
else
   {
   l_port[y][0][port]|=bit;
 638:	a3 e0       	ldi	r26, 0x03	; 3
 63a:	ee 0f       	add	r30, r30
 63c:	ff 1f       	adc	r31, r31
 63e:	aa 95       	dec	r26
 640:	e1 f7       	brne	.-8      	; 0x63a <led_set+0x4a>
 642:	e8 0f       	add	r30, r24
 644:	f9 1f       	adc	r31, r25
 646:	e2 54       	subi	r30, 0x42	; 66
 648:	fe 4f       	sbci	r31, 0xFE	; 254
 64a:	80 81       	ld	r24, Z
 64c:	82 2b       	or	r24, r18
 64e:	80 83       	st	Z, r24
 650:	e6 2f       	mov	r30, r22
 652:	f0 e0       	ldi	r31, 0x00	; 0
 654:	83 2f       	mov	r24, r19
 656:	90 e0       	ldi	r25, 0x00	; 0
   }
if (value&0x02)
 658:	41 ff       	sbrs	r20, 1
 65a:	0e c0       	rjmp	.+28     	; 0x678 <led_set+0x88>
   {
   l_port[y][1][port]&=~bit;
 65c:	73 e0       	ldi	r23, 0x03	; 3
 65e:	ee 0f       	add	r30, r30
 660:	ff 1f       	adc	r31, r31
 662:	7a 95       	dec	r23
 664:	e1 f7       	brne	.-8      	; 0x65e <led_set+0x6e>
 666:	e2 54       	subi	r30, 0x42	; 66
 668:	fe 4f       	sbci	r31, 0xFE	; 254
 66a:	e8 0f       	add	r30, r24
 66c:	f9 1f       	adc	r31, r25
 66e:	82 2f       	mov	r24, r18
 670:	80 95       	com	r24
 672:	92 81       	ldd	r25, Z+2	; 0x02
 674:	89 23       	and	r24, r25
 676:	0b c0       	rjmp	.+22     	; 0x68e <led_set+0x9e>
   }
else
   {
   l_port[y][1][port]|=bit;
 678:	53 e0       	ldi	r21, 0x03	; 3
 67a:	ee 0f       	add	r30, r30
 67c:	ff 1f       	adc	r31, r31
 67e:	5a 95       	dec	r21
 680:	e1 f7       	brne	.-8      	; 0x67a <led_set+0x8a>
 682:	e2 54       	subi	r30, 0x42	; 66
 684:	fe 4f       	sbci	r31, 0xFE	; 254
 686:	e8 0f       	add	r30, r24
 688:	f9 1f       	adc	r31, r25
 68a:	82 81       	ldd	r24, Z+2	; 0x02
 68c:	82 2b       	or	r24, r18
 68e:	82 83       	std	Z+2, r24	; 0x02
 690:	e6 2f       	mov	r30, r22
 692:	f0 e0       	ldi	r31, 0x00	; 0
 694:	83 2f       	mov	r24, r19
 696:	90 e0       	ldi	r25, 0x00	; 0
   }
if (value&0x04)
 698:	42 ff       	sbrs	r20, 2
 69a:	0e c0       	rjmp	.+28     	; 0x6b8 <led_set+0xc8>
   {
   l_port[y][2][port]&=~bit;
 69c:	b3 e0       	ldi	r27, 0x03	; 3
 69e:	ee 0f       	add	r30, r30
 6a0:	ff 1f       	adc	r31, r31
 6a2:	ba 95       	dec	r27
 6a4:	e1 f7       	brne	.-8      	; 0x69e <led_set+0xae>
 6a6:	e2 54       	subi	r30, 0x42	; 66
 6a8:	fe 4f       	sbci	r31, 0xFE	; 254
 6aa:	e8 0f       	add	r30, r24
 6ac:	f9 1f       	adc	r31, r25
 6ae:	82 2f       	mov	r24, r18
 6b0:	80 95       	com	r24
 6b2:	94 81       	ldd	r25, Z+4	; 0x04
 6b4:	89 23       	and	r24, r25
 6b6:	0b c0       	rjmp	.+22     	; 0x6ce <led_set+0xde>
   }
else
   {
   l_port[y][2][port]|=bit;
 6b8:	a3 e0       	ldi	r26, 0x03	; 3
 6ba:	ee 0f       	add	r30, r30
 6bc:	ff 1f       	adc	r31, r31
 6be:	aa 95       	dec	r26
 6c0:	e1 f7       	brne	.-8      	; 0x6ba <led_set+0xca>
 6c2:	e2 54       	subi	r30, 0x42	; 66
 6c4:	fe 4f       	sbci	r31, 0xFE	; 254
 6c6:	e8 0f       	add	r30, r24
 6c8:	f9 1f       	adc	r31, r25
 6ca:	84 81       	ldd	r24, Z+4	; 0x04
 6cc:	82 2b       	or	r24, r18
 6ce:	84 83       	std	Z+4, r24	; 0x04
 6d0:	e6 2f       	mov	r30, r22
 6d2:	f0 e0       	ldi	r31, 0x00	; 0
 6d4:	83 2f       	mov	r24, r19
 6d6:	90 e0       	ldi	r25, 0x00	; 0
   }
if (value&0x08)
 6d8:	43 ff       	sbrs	r20, 3
 6da:	0d c0       	rjmp	.+26     	; 0x6f6 <led_set+0x106>
   {
   l_port[y][3][port]&=~bit;
 6dc:	73 e0       	ldi	r23, 0x03	; 3
 6de:	ee 0f       	add	r30, r30
 6e0:	ff 1f       	adc	r31, r31
 6e2:	7a 95       	dec	r23
 6e4:	e1 f7       	brne	.-8      	; 0x6de <led_set+0xee>
 6e6:	e2 54       	subi	r30, 0x42	; 66
 6e8:	fe 4f       	sbci	r31, 0xFE	; 254
 6ea:	e8 0f       	add	r30, r24
 6ec:	f9 1f       	adc	r31, r25
 6ee:	20 95       	com	r18
 6f0:	86 81       	ldd	r24, Z+6	; 0x06
 6f2:	28 23       	and	r18, r24
 6f4:	0b c0       	rjmp	.+22     	; 0x70c <led_set+0x11c>
   }
else
   {
   l_port[y][3][port]|=bit;
 6f6:	63 e0       	ldi	r22, 0x03	; 3
 6f8:	ee 0f       	add	r30, r30
 6fa:	ff 1f       	adc	r31, r31
 6fc:	6a 95       	dec	r22
 6fe:	e1 f7       	brne	.-8      	; 0x6f8 <led_set+0x108>
 700:	e2 54       	subi	r30, 0x42	; 66
 702:	fe 4f       	sbci	r31, 0xFE	; 254
 704:	e8 0f       	add	r30, r24
 706:	f9 1f       	adc	r31, r25
 708:	86 81       	ldd	r24, Z+6	; 0x06
 70a:	28 2b       	or	r18, r24
 70c:	26 83       	std	Z+6, r18	; 0x06
 70e:	08 95       	ret

00000710 <l2led>:
}



void l2led()
{
 710:	8f 92       	push	r8
 712:	9f 92       	push	r9
 714:	af 92       	push	r10
 716:	bf 92       	push	r11
 718:	cf 92       	push	r12
 71a:	df 92       	push	r13
 71c:	ef 92       	push	r14
 71e:	ff 92       	push	r15
 720:	0f 93       	push	r16
 722:	1f 93       	push	r17
 724:	cf 93       	push	r28
 726:	df 93       	push	r29
 728:	ae eb       	ldi	r26, 0xBE	; 190
 72a:	b1 e0       	ldi	r27, 0x01	; 1
 72c:	cc 24       	eor	r12, r12
 72e:	dd 24       	eor	r13, r13
   {
   tmp0=0;tmp1=0;tmp2=0;tmp3=0;
   for(i=0;i<16;i++)
      {
	  tmp=l[j*16+l_order[i]];
	  tmp0=(tmp0<<1)|((tmp&0x01) ? 0 : 1);
 730:	91 e0       	ldi	r25, 0x01	; 1
 732:	a9 2e       	mov	r10, r25
 734:	b1 2c       	mov	r11, r1
 736:	50 c0       	rjmp	.+160    	; 0x7d8 <l2led+0xc8>
 738:	00 0f       	add	r16, r16
 73a:	11 1f       	adc	r17, r17
 73c:	f7 01       	movw	r30, r14
 73e:	81 91       	ld	r24, Z+
 740:	7f 01       	movw	r14, r30
 742:	f4 01       	movw	r30, r8
 744:	e8 0f       	add	r30, r24
 746:	f1 1d       	adc	r31, r1
 748:	20 81       	ld	r18, Z
 74a:	30 e0       	ldi	r19, 0x00	; 0
 74c:	c9 01       	movw	r24, r18
 74e:	8a 25       	eor	r24, r10
 750:	9b 25       	eor	r25, r11
 752:	81 70       	andi	r24, 0x01	; 1
 754:	90 70       	andi	r25, 0x00	; 0
 756:	08 2b       	or	r16, r24
 758:	19 2b       	or	r17, r25
	  tmp1=(tmp1<<1)|((tmp&0x02) ? 0 : 1);
 75a:	cc 0f       	add	r28, r28
 75c:	dd 1f       	adc	r29, r29
 75e:	c9 01       	movw	r24, r18
 760:	96 95       	lsr	r25
 762:	87 95       	ror	r24
 764:	8a 25       	eor	r24, r10
 766:	9b 25       	eor	r25, r11
 768:	81 70       	andi	r24, 0x01	; 1
 76a:	90 70       	andi	r25, 0x00	; 0
 76c:	c8 2b       	or	r28, r24
 76e:	d9 2b       	or	r29, r25
	  tmp2=(tmp2<<1)|((tmp&0x04) ? 0 : 1);
 770:	66 0f       	add	r22, r22
 772:	77 1f       	adc	r23, r23
 774:	36 95       	lsr	r19
 776:	27 95       	ror	r18
 778:	36 95       	lsr	r19
 77a:	27 95       	ror	r18
 77c:	c9 01       	movw	r24, r18
 77e:	8a 25       	eor	r24, r10
 780:	9b 25       	eor	r25, r11
 782:	81 70       	andi	r24, 0x01	; 1
 784:	90 70       	andi	r25, 0x00	; 0
 786:	68 2b       	or	r22, r24
 788:	79 2b       	or	r23, r25
	  tmp3=(tmp3<<1)|((tmp&0x08) ? 0 : 1);
 78a:	44 0f       	add	r20, r20
 78c:	55 1f       	adc	r21, r21
 78e:	36 95       	lsr	r19
 790:	27 95       	ror	r18
 792:	2a 25       	eor	r18, r10
 794:	3b 25       	eor	r19, r11
 796:	21 70       	andi	r18, 0x01	; 1
 798:	30 70       	andi	r19, 0x00	; 0
 79a:	42 2b       	or	r20, r18
 79c:	53 2b       	or	r21, r19
uint8_t i,j,tmp;
uint16_t tmp0,tmp1,tmp2,tmp3;
for(j=0;j<16;j++)
   {
   tmp0=0;tmp1=0;tmp2=0;tmp3=0;
   for(i=0;i<16;i++)
 79e:	f0 e7       	ldi	r31, 0x70	; 112
 7a0:	ef 16       	cp	r14, r31
 7a2:	f0 e0       	ldi	r31, 0x00	; 0
 7a4:	ff 06       	cpc	r15, r31
 7a6:	41 f6       	brne	.-112    	; 0x738 <l2led+0x28>
	  tmp0=(tmp0<<1)|((tmp&0x01) ? 0 : 1);
	  tmp1=(tmp1<<1)|((tmp&0x02) ? 0 : 1);
	  tmp2=(tmp2<<1)|((tmp&0x04) ? 0 : 1);
	  tmp3=(tmp3<<1)|((tmp&0x08) ? 0 : 1);
	  }
   *(uint16_t *)&l_port[j][0][0]=tmp0;
 7a8:	11 96       	adiw	r26, 0x01	; 1
 7aa:	1c 93       	st	X, r17
 7ac:	0e 93       	st	-X, r16
   *(uint16_t *)&l_port[j][1][0]=tmp1;
 7ae:	13 96       	adiw	r26, 0x03	; 3
 7b0:	dc 93       	st	X, r29
 7b2:	ce 93       	st	-X, r28
 7b4:	12 97       	sbiw	r26, 0x02	; 2
   *(uint16_t *)&l_port[j][2][0]=tmp2;
 7b6:	15 96       	adiw	r26, 0x05	; 5
 7b8:	7c 93       	st	X, r23
 7ba:	6e 93       	st	-X, r22
 7bc:	14 97       	sbiw	r26, 0x04	; 4
   *(uint16_t *)&l_port[j][3][0]=tmp3;
 7be:	17 96       	adiw	r26, 0x07	; 7
 7c0:	5c 93       	st	X, r21
 7c2:	4e 93       	st	-X, r20
 7c4:	16 97       	sbiw	r26, 0x06	; 6
 7c6:	18 96       	adiw	r26, 0x08	; 8
 7c8:	80 e1       	ldi	r24, 0x10	; 16
 7ca:	90 e0       	ldi	r25, 0x00	; 0
 7cc:	c8 0e       	add	r12, r24
 7ce:	d9 1e       	adc	r13, r25

void l2led()
{
uint8_t i,j,tmp;
uint16_t tmp0,tmp1,tmp2,tmp3;
for(j=0;j<16;j++)
 7d0:	92 e0       	ldi	r25, 0x02	; 2
 7d2:	ae 33       	cpi	r26, 0x3E	; 62
 7d4:	b9 07       	cpc	r27, r25
 7d6:	99 f0       	breq	.+38     	; 0x7fe <l2led+0xee>
 7d8:	20 e6       	ldi	r18, 0x60	; 96
 7da:	e2 2e       	mov	r14, r18
 7dc:	20 e0       	ldi	r18, 0x00	; 0
 7de:	f2 2e       	mov	r15, r18
 7e0:	00 e0       	ldi	r16, 0x00	; 0
 7e2:	10 e0       	ldi	r17, 0x00	; 0
 7e4:	c0 e0       	ldi	r28, 0x00	; 0
 7e6:	d0 e0       	ldi	r29, 0x00	; 0
 7e8:	60 e0       	ldi	r22, 0x00	; 0
 7ea:	70 e0       	ldi	r23, 0x00	; 0
 7ec:	40 e0       	ldi	r20, 0x00	; 0
 7ee:	50 e0       	ldi	r21, 0x00	; 0
   {
   tmp0=0;tmp1=0;tmp2=0;tmp3=0;
   for(i=0;i<16;i++)
      {
	  tmp=l[j*16+l_order[i]];
	  tmp0=(tmp0<<1)|((tmp&0x01) ? 0 : 1);
 7f0:	9e eb       	ldi	r25, 0xBE	; 190
 7f2:	89 2e       	mov	r8, r25
 7f4:	90 e0       	ldi	r25, 0x00	; 0
 7f6:	99 2e       	mov	r9, r25
 7f8:	8c 0c       	add	r8, r12
 7fa:	9d 1c       	adc	r9, r13
 7fc:	9d cf       	rjmp	.-198    	; 0x738 <l2led+0x28>
   *(uint16_t *)&l_port[j][0][0]=tmp0;
   *(uint16_t *)&l_port[j][1][0]=tmp1;
   *(uint16_t *)&l_port[j][2][0]=tmp2;
   *(uint16_t *)&l_port[j][3][0]=tmp3;
   }
}
 7fe:	df 91       	pop	r29
 800:	cf 91       	pop	r28
 802:	1f 91       	pop	r17
 804:	0f 91       	pop	r16
 806:	ff 90       	pop	r15
 808:	ef 90       	pop	r14
 80a:	df 90       	pop	r13
 80c:	cf 90       	pop	r12
 80e:	bf 90       	pop	r11
 810:	af 90       	pop	r10
 812:	9f 90       	pop	r9
 814:	8f 90       	pop	r8
 816:	08 95       	ret

00000818 <__vector_4>:

// led update interrupt at variable rate for 4 scans per about 2KHz
ISR(TIMER1_COMPA_vect,ISR_NAKED)
{
// enter interrupt
asm volatile ( 
 818:	0f 93       	push	r16
 81a:	0f b7       	in	r16, 0x3f	; 63
 81c:	0f 93       	push	r16
 81e:	1f 93       	push	r17
 820:	ef 93       	push	r30
 822:	ff 93       	push	r31
 824:	11 27       	eor	r17, r17
"push r31\n\t"
"clr r17\n\t"
::);

// increment row, update phase and ms
asm volatile (
 826:	00 91 b5 00 	lds	r16, 0x00B5
 82a:	03 95       	inc	r16
 82c:	0f 70       	andi	r16, 0x0F	; 15
 82e:	00 93 b5 00 	sts	0x00B5, r16
 832:	a1 f4       	brne	.+40     	; 0x85c <done>
 834:	00 91 b6 00 	lds	r16, 0x00B6
 838:	03 95       	inc	r16
 83a:	03 70       	andi	r16, 0x03	; 3
 83c:	00 93 b6 00 	sts	0x00B6, r16
 840:	31 f4       	brne	.+12     	; 0x84e <tick_ready>
 842:	00 91 b8 00 	lds	r16, 0x00B8
 846:	03 95       	inc	r16
 848:	00 93 b8 00 	sts	0x00B8, r16
 84c:	00 27       	eor	r16, r16

0000084e <tick_ready>:
 84e:	08 94       	sec

00000850 <clockloop>:
 850:	11 1f       	adc	r17, r17
 852:	0a 95       	dec	r16
 854:	ea f7       	brpl	.-6      	; 0x850 <clockloop>
 856:	1b bd       	out	0x2b, r17	; 43
 858:	11 27       	eor	r17, r17
 85a:	1a bd       	out	0x2a, r17	; 42

0000085c <done>:
:"I" (_SFR_IO_ADDR(OCR1AH)),
"I" (_SFR_IO_ADDR(OCR1AL))
);

// disable all columns and rows
asm volatile (
 85c:	07 e0       	ldi	r16, 0x07	; 7
 85e:	0b bb       	out	0x1b, r16	; 27
 860:	0f e1       	ldi	r16, 0x1F	; 31
 862:	08 bb       	out	0x18, r16	; 24
 864:	00 e0       	ldi	r16, 0x00	; 0
 866:	05 bb       	out	0x15, r16	; 21
 868:	0f ef       	ldi	r16, 0xFF	; 255
 86a:	02 bb       	out	0x12, r16	; 18
 86c:	00 e0       	ldi	r16, 0x00	; 0
 86e:	07 b9       	out	0x07, r16	; 7
"I" (_SFR_IO_ADDR(PORTD)),
"I" (_SFR_IO_ADDR(PORTE))
);

// test button
asm volatile (
 870:	00 b3       	in	r16, 0x10	; 16
 872:	00 95       	com	r16
 874:	04 70       	andi	r16, 0x04	; 4
 876:	00 93 b7 00 	sts	0x00B7, r16
 87a:	59 f5       	brne	.+86     	; 0x8d2 <return>
:"I" (_SFR_IO_ADDR(PIND))
);

// first A2 A1 A0 B4 B3 B2 B1 B0 second: D7 D6 D5 D4 D3 D2 D1 D0
// update X-driving port bits from a pre-calculated table
asm volatile (
 87c:	ee eb       	ldi	r30, 0xBE	; 190
 87e:	f1 e0       	ldi	r31, 0x01	; 1
 880:	00 91 b5 00 	lds	r16, 0x00B5
 884:	00 0f       	add	r16, r16
 886:	00 0f       	add	r16, r16
 888:	00 0f       	add	r16, r16
 88a:	e0 0f       	add	r30, r16
 88c:	f1 1f       	adc	r31, r17
 88e:	00 91 b6 00 	lds	r16, 0x00B6
 892:	00 0f       	add	r16, r16
 894:	e0 0f       	add	r30, r16
 896:	f1 1f       	adc	r31, r17
 898:	00 81       	ld	r16, Z
 89a:	02 95       	swap	r16
 89c:	06 95       	lsr	r16
 89e:	07 70       	andi	r16, 0x07	; 7
 8a0:	0b bb       	out	0x1b, r16	; 27
 8a2:	01 91       	ld	r16, Z+
 8a4:	0f 71       	andi	r16, 0x1F	; 31
 8a6:	08 bb       	out	0x18, r16	; 24
 8a8:	00 81       	ld	r16, Z
 8aa:	02 bb       	out	0x12, r16	; 18
  "I" (_SFR_IO_ADDR(PORTB)),
  "I" (_SFR_IO_ADDR(PORTD))
);

// turn on line bit (y)
asm volatile (
 8ac:	e0 e9       	ldi	r30, 0x90	; 144
 8ae:	f0 e0       	ldi	r31, 0x00	; 0
 8b0:	00 91 b5 00 	lds	r16, 0x00B5
 8b4:	00 0f       	add	r16, r16
 8b6:	e0 0f       	add	r30, r16
 8b8:	f1 1f       	adc	r31, r17
 8ba:	01 91       	ld	r16, Z+
 8bc:	11 91       	ld	r17, Z+
 8be:	e0 2f       	mov	r30, r16
 8c0:	ff 27       	eor	r31, r31
 8c2:	00 27       	eor	r16, r16
 8c4:	08 94       	sec

000008c6 <shiftloop>:
 8c6:	00 1f       	adc	r16, r16
 8c8:	1a 95       	dec	r17
 8ca:	ea f7       	brpl	.-6      	; 0x8c6 <shiftloop>
 8cc:	10 81       	ld	r17, Z
 8ce:	10 2b       	or	r17, r16
 8d0:	10 83       	st	Z, r17

000008d2 <return>:
:
: "z" ((uint8_t*) &Y[0])
);

// return from interrupt
asm volatile (
 8d2:	ff 91       	pop	r31
 8d4:	ef 91       	pop	r30
 8d6:	1f 91       	pop	r17
 8d8:	0f 91       	pop	r16
 8da:	0f bf       	out	0x3f, r16	; 63
 8dc:	0f 91       	pop	r16
 8de:	18 95       	reti

000008e0 <do_rand>:
 8e0:	a0 e0       	ldi	r26, 0x00	; 0
 8e2:	b0 e0       	ldi	r27, 0x00	; 0
 8e4:	e5 e7       	ldi	r30, 0x75	; 117
 8e6:	f4 e0       	ldi	r31, 0x04	; 4
 8e8:	96 c0       	rjmp	.+300    	; 0xa16 <__prologue_saves__+0x10>
 8ea:	ec 01       	movw	r28, r24
 8ec:	a8 80       	ld	r10, Y
 8ee:	b9 80       	ldd	r11, Y+1	; 0x01
 8f0:	ca 80       	ldd	r12, Y+2	; 0x02
 8f2:	db 80       	ldd	r13, Y+3	; 0x03
 8f4:	a1 14       	cp	r10, r1
 8f6:	b1 04       	cpc	r11, r1
 8f8:	c1 04       	cpc	r12, r1
 8fa:	d1 04       	cpc	r13, r1
 8fc:	41 f4       	brne	.+16     	; 0x90e <do_rand+0x2e>
 8fe:	84 e2       	ldi	r24, 0x24	; 36
 900:	a8 2e       	mov	r10, r24
 902:	89 ed       	ldi	r24, 0xD9	; 217
 904:	b8 2e       	mov	r11, r24
 906:	8b e5       	ldi	r24, 0x5B	; 91
 908:	c8 2e       	mov	r12, r24
 90a:	87 e0       	ldi	r24, 0x07	; 7
 90c:	d8 2e       	mov	r13, r24
 90e:	c6 01       	movw	r24, r12
 910:	b5 01       	movw	r22, r10
 912:	2d e1       	ldi	r18, 0x1D	; 29
 914:	33 ef       	ldi	r19, 0xF3	; 243
 916:	41 e0       	ldi	r20, 0x01	; 1
 918:	50 e0       	ldi	r21, 0x00	; 0
 91a:	5a d0       	rcall	.+180    	; 0x9d0 <__divmodsi4>
 91c:	27 ea       	ldi	r18, 0xA7	; 167
 91e:	31 e4       	ldi	r19, 0x41	; 65
 920:	40 e0       	ldi	r20, 0x00	; 0
 922:	50 e0       	ldi	r21, 0x00	; 0
 924:	36 d0       	rcall	.+108    	; 0x992 <__mulsi3>
 926:	7b 01       	movw	r14, r22
 928:	8c 01       	movw	r16, r24
 92a:	c6 01       	movw	r24, r12
 92c:	b5 01       	movw	r22, r10
 92e:	2d e1       	ldi	r18, 0x1D	; 29
 930:	33 ef       	ldi	r19, 0xF3	; 243
 932:	41 e0       	ldi	r20, 0x01	; 1
 934:	50 e0       	ldi	r21, 0x00	; 0
 936:	4c d0       	rcall	.+152    	; 0x9d0 <__divmodsi4>
 938:	ca 01       	movw	r24, r20
 93a:	b9 01       	movw	r22, r18
 93c:	2c ee       	ldi	r18, 0xEC	; 236
 93e:	34 ef       	ldi	r19, 0xF4	; 244
 940:	4f ef       	ldi	r20, 0xFF	; 255
 942:	5f ef       	ldi	r21, 0xFF	; 255
 944:	26 d0       	rcall	.+76     	; 0x992 <__mulsi3>
 946:	6e 0d       	add	r22, r14
 948:	7f 1d       	adc	r23, r15
 94a:	80 1f       	adc	r24, r16
 94c:	91 1f       	adc	r25, r17
 94e:	97 ff       	sbrs	r25, 7
 950:	04 c0       	rjmp	.+8      	; 0x95a <do_rand+0x7a>
 952:	61 50       	subi	r22, 0x01	; 1
 954:	70 40       	sbci	r23, 0x00	; 0
 956:	80 40       	sbci	r24, 0x00	; 0
 958:	90 48       	sbci	r25, 0x80	; 128
 95a:	68 83       	st	Y, r22
 95c:	79 83       	std	Y+1, r23	; 0x01
 95e:	8a 83       	std	Y+2, r24	; 0x02
 960:	9b 83       	std	Y+3, r25	; 0x03
 962:	9b 01       	movw	r18, r22
 964:	3f 77       	andi	r19, 0x7F	; 127
 966:	c9 01       	movw	r24, r18
 968:	cd b7       	in	r28, 0x3d	; 61
 96a:	de b7       	in	r29, 0x3e	; 62
 96c:	ea e0       	ldi	r30, 0x0A	; 10
 96e:	6f c0       	rjmp	.+222    	; 0xa4e <__epilogue_restores__+0x10>

00000970 <rand_r>:
 970:	b7 df       	rcall	.-146    	; 0x8e0 <do_rand>
 972:	08 95       	ret

00000974 <rand>:
 974:	80 eb       	ldi	r24, 0xB0	; 176
 976:	90 e0       	ldi	r25, 0x00	; 0
 978:	b3 df       	rcall	.-154    	; 0x8e0 <do_rand>
 97a:	08 95       	ret

0000097c <srand>:
 97c:	a0 e0       	ldi	r26, 0x00	; 0
 97e:	b0 e0       	ldi	r27, 0x00	; 0
 980:	80 93 b0 00 	sts	0x00B0, r24
 984:	90 93 b1 00 	sts	0x00B1, r25
 988:	a0 93 b2 00 	sts	0x00B2, r26
 98c:	b0 93 b3 00 	sts	0x00B3, r27
 990:	08 95       	ret

00000992 <__mulsi3>:
 992:	62 9f       	mul	r22, r18
 994:	d0 01       	movw	r26, r0
 996:	73 9f       	mul	r23, r19
 998:	f0 01       	movw	r30, r0
 99a:	82 9f       	mul	r24, r18
 99c:	e0 0d       	add	r30, r0
 99e:	f1 1d       	adc	r31, r1
 9a0:	64 9f       	mul	r22, r20
 9a2:	e0 0d       	add	r30, r0
 9a4:	f1 1d       	adc	r31, r1
 9a6:	92 9f       	mul	r25, r18
 9a8:	f0 0d       	add	r31, r0
 9aa:	83 9f       	mul	r24, r19
 9ac:	f0 0d       	add	r31, r0
 9ae:	74 9f       	mul	r23, r20
 9b0:	f0 0d       	add	r31, r0
 9b2:	65 9f       	mul	r22, r21
 9b4:	f0 0d       	add	r31, r0
 9b6:	99 27       	eor	r25, r25
 9b8:	72 9f       	mul	r23, r18
 9ba:	b0 0d       	add	r27, r0
 9bc:	e1 1d       	adc	r30, r1
 9be:	f9 1f       	adc	r31, r25
 9c0:	63 9f       	mul	r22, r19
 9c2:	b0 0d       	add	r27, r0
 9c4:	e1 1d       	adc	r30, r1
 9c6:	f9 1f       	adc	r31, r25
 9c8:	bd 01       	movw	r22, r26
 9ca:	cf 01       	movw	r24, r30
 9cc:	11 24       	eor	r1, r1
 9ce:	08 95       	ret

000009d0 <__divmodsi4>:
 9d0:	97 fb       	bst	r25, 7
 9d2:	09 2e       	mov	r0, r25
 9d4:	05 26       	eor	r0, r21
 9d6:	0e d0       	rcall	.+28     	; 0x9f4 <__divmodsi4_neg1>
 9d8:	57 fd       	sbrc	r21, 7
 9da:	04 d0       	rcall	.+8      	; 0x9e4 <__divmodsi4_neg2>
 9dc:	4b d0       	rcall	.+150    	; 0xa74 <__udivmodsi4>
 9de:	0a d0       	rcall	.+20     	; 0x9f4 <__divmodsi4_neg1>
 9e0:	00 1c       	adc	r0, r0
 9e2:	38 f4       	brcc	.+14     	; 0x9f2 <__divmodsi4_exit>

000009e4 <__divmodsi4_neg2>:
 9e4:	50 95       	com	r21
 9e6:	40 95       	com	r20
 9e8:	30 95       	com	r19
 9ea:	21 95       	neg	r18
 9ec:	3f 4f       	sbci	r19, 0xFF	; 255
 9ee:	4f 4f       	sbci	r20, 0xFF	; 255
 9f0:	5f 4f       	sbci	r21, 0xFF	; 255

000009f2 <__divmodsi4_exit>:
 9f2:	08 95       	ret

000009f4 <__divmodsi4_neg1>:
 9f4:	f6 f7       	brtc	.-4      	; 0x9f2 <__divmodsi4_exit>
 9f6:	90 95       	com	r25
 9f8:	80 95       	com	r24
 9fa:	70 95       	com	r23
 9fc:	61 95       	neg	r22
 9fe:	7f 4f       	sbci	r23, 0xFF	; 255
 a00:	8f 4f       	sbci	r24, 0xFF	; 255
 a02:	9f 4f       	sbci	r25, 0xFF	; 255
 a04:	08 95       	ret

00000a06 <__prologue_saves__>:
 a06:	2f 92       	push	r2
 a08:	3f 92       	push	r3
 a0a:	4f 92       	push	r4
 a0c:	5f 92       	push	r5
 a0e:	6f 92       	push	r6
 a10:	7f 92       	push	r7
 a12:	8f 92       	push	r8
 a14:	9f 92       	push	r9
 a16:	af 92       	push	r10
 a18:	bf 92       	push	r11
 a1a:	cf 92       	push	r12
 a1c:	df 92       	push	r13
 a1e:	ef 92       	push	r14
 a20:	ff 92       	push	r15
 a22:	0f 93       	push	r16
 a24:	1f 93       	push	r17
 a26:	cf 93       	push	r28
 a28:	df 93       	push	r29
 a2a:	cd b7       	in	r28, 0x3d	; 61
 a2c:	de b7       	in	r29, 0x3e	; 62
 a2e:	ca 1b       	sub	r28, r26
 a30:	db 0b       	sbc	r29, r27
 a32:	0f b6       	in	r0, 0x3f	; 63
 a34:	f8 94       	cli
 a36:	de bf       	out	0x3e, r29	; 62
 a38:	0f be       	out	0x3f, r0	; 63
 a3a:	cd bf       	out	0x3d, r28	; 61
 a3c:	09 94       	ijmp

00000a3e <__epilogue_restores__>:
 a3e:	2a 88       	ldd	r2, Y+18	; 0x12
 a40:	39 88       	ldd	r3, Y+17	; 0x11
 a42:	48 88       	ldd	r4, Y+16	; 0x10
 a44:	5f 84       	ldd	r5, Y+15	; 0x0f
 a46:	6e 84       	ldd	r6, Y+14	; 0x0e
 a48:	7d 84       	ldd	r7, Y+13	; 0x0d
 a4a:	8c 84       	ldd	r8, Y+12	; 0x0c
 a4c:	9b 84       	ldd	r9, Y+11	; 0x0b
 a4e:	aa 84       	ldd	r10, Y+10	; 0x0a
 a50:	b9 84       	ldd	r11, Y+9	; 0x09
 a52:	c8 84       	ldd	r12, Y+8	; 0x08
 a54:	df 80       	ldd	r13, Y+7	; 0x07
 a56:	ee 80       	ldd	r14, Y+6	; 0x06
 a58:	fd 80       	ldd	r15, Y+5	; 0x05
 a5a:	0c 81       	ldd	r16, Y+4	; 0x04
 a5c:	1b 81       	ldd	r17, Y+3	; 0x03
 a5e:	aa 81       	ldd	r26, Y+2	; 0x02
 a60:	b9 81       	ldd	r27, Y+1	; 0x01
 a62:	ce 0f       	add	r28, r30
 a64:	d1 1d       	adc	r29, r1
 a66:	0f b6       	in	r0, 0x3f	; 63
 a68:	f8 94       	cli
 a6a:	de bf       	out	0x3e, r29	; 62
 a6c:	0f be       	out	0x3f, r0	; 63
 a6e:	cd bf       	out	0x3d, r28	; 61
 a70:	ed 01       	movw	r28, r26
 a72:	08 95       	ret

00000a74 <__udivmodsi4>:
 a74:	a1 e2       	ldi	r26, 0x21	; 33
 a76:	1a 2e       	mov	r1, r26
 a78:	aa 1b       	sub	r26, r26
 a7a:	bb 1b       	sub	r27, r27
 a7c:	fd 01       	movw	r30, r26
 a7e:	0d c0       	rjmp	.+26     	; 0xa9a <__udivmodsi4_ep>

00000a80 <__udivmodsi4_loop>:
 a80:	aa 1f       	adc	r26, r26
 a82:	bb 1f       	adc	r27, r27
 a84:	ee 1f       	adc	r30, r30
 a86:	ff 1f       	adc	r31, r31
 a88:	a2 17       	cp	r26, r18
 a8a:	b3 07       	cpc	r27, r19
 a8c:	e4 07       	cpc	r30, r20
 a8e:	f5 07       	cpc	r31, r21
 a90:	20 f0       	brcs	.+8      	; 0xa9a <__udivmodsi4_ep>
 a92:	a2 1b       	sub	r26, r18
 a94:	b3 0b       	sbc	r27, r19
 a96:	e4 0b       	sbc	r30, r20
 a98:	f5 0b       	sbc	r31, r21

00000a9a <__udivmodsi4_ep>:
 a9a:	66 1f       	adc	r22, r22
 a9c:	77 1f       	adc	r23, r23
 a9e:	88 1f       	adc	r24, r24
 aa0:	99 1f       	adc	r25, r25
 aa2:	1a 94       	dec	r1
 aa4:	69 f7       	brne	.-38     	; 0xa80 <__udivmodsi4_loop>
 aa6:	60 95       	com	r22
 aa8:	70 95       	com	r23
 aaa:	80 95       	com	r24
 aac:	90 95       	com	r25
 aae:	9b 01       	movw	r18, r22
 ab0:	ac 01       	movw	r20, r24
 ab2:	bd 01       	movw	r22, r26
 ab4:	cf 01       	movw	r24, r30
 ab6:	08 95       	ret

00000ab8 <_exit>:
 ab8:	f8 94       	cli

00000aba <__stop_program>:
 aba:	ff cf       	rjmp	.-2      	; 0xaba <__stop_program>
